/* eslint-disable */ /**
 *
 * THIS FILE IS AUTOGENERATED, DO NOT EDIT IT!
 *
 * instead, edit one of the `.graphql` files in this project and run
 *
 * npm run graphql-codegen
 *
 * for this file to be re-created
 */

import * as Types from './types.generated';

import { api } from './baseApi';
module.hot?.accept();
export type GetReposQueryVariables = Types.Exact<{ [key: string]: never; }>;


export type GetReposQuery = { __typename?: 'Query', repositoryOwner?: { __typename?: 'Organization', repositories: { __typename?: 'RepositoryConnection', totalCount: number }, repository?: { __typename?: 'Repository', description?: string, forks: { __typename?: 'RepositoryConnection', totalCount: number }, issues: { __typename?: 'IssueConnection', totalCount: number }, stargazers: { __typename?: 'StargazerConnection', totalCount: number }, watchers: { __typename?: 'UserConnection', totalCount: number }, pullRequests: { __typename?: 'PullRequestConnection', totalCount: number }, labels?: { __typename?: 'LabelConnection', edges?: Array<{ __typename?: 'LabelEdge', node?: { __typename?: 'Label', name: string } }> }, milestones?: { __typename?: 'MilestoneConnection', edges?: Array<{ __typename?: 'MilestoneEdge', node?: { __typename?: 'Milestone', title: string } }> } } } | { __typename?: 'User', repositories: { __typename?: 'RepositoryConnection', totalCount: number }, repository?: { __typename?: 'Repository', description?: string, forks: { __typename?: 'RepositoryConnection', totalCount: number }, issues: { __typename?: 'IssueConnection', totalCount: number }, stargazers: { __typename?: 'StargazerConnection', totalCount: number }, watchers: { __typename?: 'UserConnection', totalCount: number }, pullRequests: { __typename?: 'PullRequestConnection', totalCount: number }, labels?: { __typename?: 'LabelConnection', edges?: Array<{ __typename?: 'LabelEdge', node?: { __typename?: 'Label', name: string } }> }, milestones?: { __typename?: 'MilestoneConnection', edges?: Array<{ __typename?: 'MilestoneEdge', node?: { __typename?: 'Milestone', title: string } }> } } } };


export const GetReposDocument = `
    query GetRepos {
  repositoryOwner(login: "facebook") {
    repositories {
      totalCount
    }
    repository(name: "react") {
      description
      forks {
        totalCount
      }
      issues {
        totalCount
      }
      stargazers {
        totalCount
      }
      watchers {
        totalCount
      }
      pullRequests {
        totalCount
      }
      labels(first: 10) {
        edges {
          node {
            name
          }
        }
      }
      milestones(first: 10) {
        edges {
          node {
            title
          }
        }
      }
    }
  }
}
    `;

const injectedRtkApi = api.injectEndpoints({
  overrideExisting: module.hot?.status() === "apply",
  endpoints: (build) => ({
    GetRepos: build.query<GetReposQuery, GetReposQueryVariables | void>({
      query: (variables) => ({ document: GetReposDocument, variables })
    }),
  }),
});

export { injectedRtkApi as api };
export const { useGetReposQuery, useLazyGetReposQuery } = injectedRtkApi;

