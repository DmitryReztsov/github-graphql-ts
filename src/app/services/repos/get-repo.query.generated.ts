/* eslint-disable */ /**
 *
 * THIS FILE IS AUTOGENERATED, DO NOT EDIT IT!
 *
 * instead, edit one of the `.graphql` files in this project and run
 *
 * npm run graphql-codegen
 *
 * for this file to be re-created
 */

import * as Types from '../types.generated';

import.meta.webpackHot?.accept();
import { api } from '../baseApi';
export type GetRepoQueryVariables = Types.Exact<{
  name: Types.Scalars['String']['input'];
  owner: Types.Scalars['String']['input'];
}>;


export type GetRepoQuery = { __typename?: 'Query', repository?: { __typename?: 'Repository', id: string, name: string, stargazerCount: number, description?: string, owner: { __typename?: 'Organization', id: string, login: string, avatarUrl: any, url: any } | { __typename?: 'User', id: string, login: string, avatarUrl: any, url: any }, defaultBranchRef?: { __typename?: 'Ref', target?: { __typename?: 'Blob' } | { __typename?: 'Commit', id: string, committedDate: any } | { __typename?: 'Tag' } | { __typename?: 'Tree' } }, languages?: { __typename?: 'LanguageConnection', edges?: Array<{ __typename?: 'LanguageEdge', node: { __typename?: 'Language', color?: string, id: string, name: string } }> } } };


export const GetRepoDocument = `
    query getRepo($name: String!, $owner: String!) {
  repository(name: $name, owner: $owner) {
    id
    owner {
      id
      login
      avatarUrl(size: 24)
      url
    }
    name
    stargazerCount
    defaultBranchRef {
      target {
        ... on Commit {
          id
          committedDate
        }
      }
    }
    languages(first: 10) {
      edges {
        node {
          color
          id
          name
        }
      }
    }
    description
  }
}
    `;

const injectedRtkApi = api.injectEndpoints({
  overrideExisting: import.meta.webpackHot?.status() === "apply",
  endpoints: (build) => ({
    getRepo: build.query<GetRepoQuery, GetRepoQueryVariables>({
      query: (variables) => ({ document: GetRepoDocument, variables })
    }),
  }),
});

export { injectedRtkApi as api };
export const { useGetRepoQuery, useLazyGetRepoQuery } = injectedRtkApi;

