/* eslint-disable */ /**
 *
 * THIS FILE IS AUTOGENERATED, DO NOT EDIT IT!
 *
 * instead, edit one of the `.graphql` files in this project and run
 *
 * npm run graphql-codegen
 *
 * for this file to be re-created
 */

import * as Types from '../types.generated';

import.meta.webpackHot?.accept();
import { api } from '../baseApi';
export type GetReposQueryVariables = Types.Exact<{
  name: Types.Scalars['String']['input'];
  cursor?: Types.InputMaybe<Types.Scalars['String']['input']>;
  limit: Types.Scalars['Int']['input'];
}>;


export type GetReposQuery = { __typename?: 'Query', search: { __typename?: 'SearchResultItemConnection', repositoryCount: number, edges?: Array<{ __typename?: 'SearchResultItemEdge', node?: { __typename?: 'App' } | { __typename?: 'Discussion' } | { __typename?: 'Issue' } | { __typename?: 'MarketplaceListing' } | { __typename?: 'Organization' } | { __typename?: 'PullRequest' } | { __typename?: 'Repository', id: string, name: string, url: any, stargazerCount: number, owner: { __typename?: 'Organization', login: string } | { __typename?: 'User', login: string }, defaultBranchRef?: { __typename?: 'Ref', target?: { __typename?: 'Blob' } | { __typename?: 'Commit', id: string, committedDate: any } | { __typename?: 'Tag' } | { __typename?: 'Tree' } } } | { __typename?: 'User' } }> } };


export const GetReposDocument = `
    query getRepos($name: String!, $cursor: String, $limit: Int!) {
  search(query: $name, after: $cursor, type: REPOSITORY, first: $limit) {
    edges {
      node {
        ... on Repository {
          id
          name
          url
          stargazerCount
          owner {
            login
          }
          defaultBranchRef {
            target {
              ... on Commit {
                id
                committedDate
              }
            }
          }
        }
      }
    }
    repositoryCount
  }
}
    `;

const injectedRtkApi = api.injectEndpoints({
  overrideExisting: import.meta.webpackHot?.status() === "apply",
  endpoints: (build) => ({
    getRepos: build.query<GetReposQuery, GetReposQueryVariables>({
      query: (variables) => ({ document: GetReposDocument, variables })
    }),
  }),
});

export { injectedRtkApi as api };
export const { useGetReposQuery, useLazyGetReposQuery } = injectedRtkApi;

